NIO与零拷贝
mmap与sendFile的区别
1）mmap适合小数据量读写，sendFile适合大文件传输
2）mmap需要4次上下文切换，3次数据拷贝；sendFile需要3次上下文切换，最少2次数据拷贝
3）sendFile可以采用DMA方式，减少CPU拷贝，mmap则不能（必须从内核拷贝到Socket缓存区）

原生NIO存在的问题
1）API繁杂
2）对多线程和网络编程非常熟悉，才能写出该质量的NIO程序
3）开发工作量和难度都非常大：客户端面临网络闪断、半包读写、失败缓存、网络拥塞和异常流的处理等
4）NIO存在的Bug， Epoll Bug,它会导致Selector空轮训，最终导致CPU100%,JDK7依旧存在

传统阻塞I/O服务模型
特点：
    1）采用阻塞IO模式获取输入的数据
    2）每个连接都需要独立的线程完成数据的输入，业务处理，数据返回
问题分析：
    1）当并发数很大，就会创建大量的线程占用很大系统资源
    2）连接创建后，如果当前线程没有数据可写，改线程阻塞在read操作，造成线程资源浪费
针对传统阻塞I/O服务模型的2个缺点，解决方案：
    1）基于I/O复用模型，多个连接共用一个阻塞对象，应用程序只需要一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时
，操作系统通知应用程序，线程从阻塞状态返回，开始处理业务逻辑。
    2）基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务。

Reactor模式：（单Reactor单线程、单Reactor多线程、主从Reactor多线程）
    1）通过一个或多个输入同时传递给服务处理器的模式（基于事件驱动）
    2）服务器程序处理传入的多个请求，并将它们同步分派到相应的处理线程，因此Reactor模式也叫Dispatcher模式
    3）Reactor模式使用IO复用监听事件，收到事件后，分发给某个线程（进程），这点就是网络服务器高并发的关键。
核心组成：
    1）Reactor:Reactor在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对IO事件作出反应
    2）handlers：处理程序执行I/O事件要完成的实际事件
单Reactor单线程：
    1）优点：模型简单，没有多线程、进程通信、竞争的问题，全部在一个线程中完成
    2）缺点：性能问题，只有一个线程，无法发挥多核CPU的性能。Handle在处理某个连接上的业务，整个进行无法处理其他连接事件，很容易导致性能瓶颈
    3）缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接受和处理外部消息，造成节点故障
    4）使用场景：客户端连接数量有限，业务处理非常快速，比如Redis在业务处理的事件度O(1)的情况。
单Reactor多线程：
    1）Reactor对象通过select监控客户端请求事件，收到事件后，通过dispatch进行分发
    2）如果是连接请求，则由Acceptor通过accept处理连接请求，然后创建一个Handle对象处理完成连接后的各种事件
    3）如果 不是连接请求，则由reactor分发调用连接对应得handler来处理
    4）handler只负责响应事件，不做具体的业务逻辑，通过read读取数据后，会分发给后面的worker线程池的某个线程处理业务。
    5）worker线程池会分配独立线程完成真正的业务，并将结果返回给handler
    6)handle收到响应后，通过send将结果返回给client
    优缺点：
    1）可以充分的利用多核cpu的运算能力
    2）多线程数据共享和访问比较复杂，Reactor处理所有的监听和响应，在单线程运行，在高并发场景下最容易出现性能瓶颈。
主从Reactor多线程：
    1）Reactor主线程MainReactor对象通过select监听连接事件，收到事件后，通过Acceptor处理连接事件
    2）当Acceptor处理连接事件后，MainReactor将连接分配给SubReactor
    3）subReactor将连接加入到连接队列进行监听，并创建handler进行各种事件处理
    4）当有新事件发生时，subReactor就会调用相应的handler处理
    5）handler通过read读取数据，分发给后面的worker线程处理
    6）worker线程池分配独立的worker线程进行业务处理，并返回结果。
    7）handler收到响应的结果后，再通过send将结果给client
    8)Reactor主线程可以对应多个Reactor子线程.
    优缺点说明：
     1）优点：父线程与子线程的数据交互职责明确，父线程只需要接受新连接，子线程完成后续的业务逻辑。
     2）优点：父线程与子线程的数据交互简单，Reactor主线程只需要把新连接传给子线程，子线程无需返回数据
     3）缺点：编程的复杂度较高。
Netty模型：
    简单版：
        1）BossGroup线程维护Selector,只关注Accept
        2）当接受到Accept事件，获取到对应得SocketChannel,封装成NIOSocketChannel并注册到Worker线程（事件循环），并进行维护。
        3）当Worker线程监听到Selector中通道发生自己感兴趣的事，就进行处理。
     详细版：
        1）Netty抽象出两组线程池 BossGroup专门负责接收客户端的连接，WorkGroup专门负责网络的读写
        2）BossGroup和WorkerGroup类型都是NioEventLoopGroup
        3)NioEventLoopGroup相当于一个事件循环组，这个组中包含多个事件循环，每一个事件循环是NioEventLoop
        4)NioEventLoop表示一个不断循环的执行处理任务的线程，每个NioEventLoop都有一个Selector，用于监听绑定其上的socket网络通讯
        5)NioEventLoopGroup可以有多个线程，即可以含有多个NioEventLoop
        6)每个BossNioEventLoop执行的步骤有3步：
            1）轮询accept事件
            2）处理accept事件，与client建立连接，生成NioSocketChannel,并将其注册到某个worker NIOEventLoop上的selector
            3）处理任务队列的任务，即runAllTasks
        7)每个Worker NIOEventLoop循环执行的步骤
            1）轮询read、write事件
            2）处理I/O事件，即read、write事件，在对应NioSocketChannel处理
            3）处理任务队列的任务，即runAllTasks
        8）每个work NIOEventLoop处理作业时，会使用pipeline(管道)，pipeline中包含了channel,即通过pipeline可以获取到相应的通道，管道中维护的许多处理器。
